// Boxing Timer Pro - ËÆæÁΩÆÁÆ°ÁêÜÂô®
// Ë¥üË¥£Â∫îÁî®ËÆæÁΩÆÁöÑÁÆ°ÁêÜ„ÄÅÊåÅ‰πÖÂåñÂíå‰∏ªÈ¢òÂàáÊç¢

/**
 * ‰∏ªÈ¢òÊûö‰∏æ
 */
export const Theme = {
    LIGHT: 'light',
    DARK: 'dark',
    AUTO: 'auto'
};

/**
 * Â≠ó‰ΩìÂ§ßÂ∞èÊûö‰∏æ
 */
export const FontSize = {
    SMALL: 'small',
    MEDIUM: 'medium',
    LARGE: 'large',
    EXTRA_LARGE: 'extra-large'
};

/**
 * ËÆæÁΩÆÁÆ°ÁêÜÂô®Á±ª
 */
export class SettingsManager {
    constructor() {
        this.settings = this.getDefaultSettings();
        this.observers = [];
        
        // CSS ÂèòÈáèÁÆ°ÁêÜ
        this.cssVariables = new Map();
        
        console.log('‚öôÔ∏è SettingsManager ÂÆû‰æãÂåñÂÆåÊàê');
    }

    /**
     * Ëé∑ÂèñÈªòËÆ§ËÆæÁΩÆ
     */
    getDefaultSettings() {
        return {
            // ÁïåÈù¢ËÆæÁΩÆ
            theme: Theme.DARK,
            fontSize: FontSize.MEDIUM,
            enableColorblindMode: false,
            enableHighContrast: false,
            enableAnimation: true,
            
            // ËÆ°Êó∂ËÆæÁΩÆ
            showMilliseconds: false,
            enableProgressBar: true,
            enableRoundProgress: true,
            
            // Èü≥È¢ëËÆæÁΩÆ (Áî± AudioManager ÁÆ°ÁêÜÔºåËøôÈáå‰øùÁïôÂºïÁî®)
            audioVolume: 0.8,
            soundScheme: 'bell',
            enableVoice: true,
            enableVibration: true,
            bluetoothDelay: 0,
            
            // ÈÄöÁü•ËÆæÁΩÆ
            enableNotifications: true,
            enableBackgroundNotifications: false,
            
            // Â±èÂπïËÆæÁΩÆ
            keepScreenOn: true,
            enableFullscreen: false,
            
            // ÈöêÁßÅËÆæÁΩÆ
            enableAnalytics: false,
            enableCrashReporting: true,
            
            // ËÆ≠ÁªÉËÆæÁΩÆ
            autoSavePresets: true,
            confirmBeforeReset: true,
            showTrainingTips: true,
            
            // ÂºÄÂèëËÆæÁΩÆ
            enableDebugMode: false,
            showPerformanceStats: false,
            
            // ÊúÄÂêéÊõ¥Êñ∞Êó∂Èó¥
            lastUpdated: Date.now()
        };
    }

    /**
     * ÂàùÂßãÂåñËÆæÁΩÆÁÆ°ÁêÜÂô®
     */
    async init() {
        try {
            // ‰ªéÊú¨Âú∞Â≠òÂÇ®Âä†ËΩΩËÆæÁΩÆ
            await this.loadSettings();
            
            // Â∫îÁî®ÂΩìÂâçËÆæÁΩÆ
            this.applySettings();
            
            // ÁõëÂê¨Á≥ªÁªü‰∏ªÈ¢òÂèòÂåñ
            this.setupSystemThemeListener();
            
            console.log('‚úÖ SettingsManager ÂàùÂßãÂåñÂÆåÊàê');
            
        } catch (error) {
            console.error('‚ùå SettingsManager ÂàùÂßãÂåñÂ§±Ë¥•:', error);
            throw error;
        }
    }

    /**
     * ‰ªéÊú¨Âú∞Â≠òÂÇ®Âä†ËΩΩËÆæÁΩÆ
     */
    async loadSettings() {
        try {
            const stored = localStorage.getItem('boxing-timer-settings');
            if (stored) {
                const storedSettings = JSON.parse(stored);
                this.settings = { ...this.settings, ...storedSettings };
                console.log('‚úÖ ËÆæÁΩÆÂä†ËΩΩÂÆåÊàê');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Âä†ËΩΩËÆæÁΩÆÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§ËÆæÁΩÆ:', error);
            this.settings = this.getDefaultSettings();
        }
    }

    /**
     * ‰øùÂ≠òËÆæÁΩÆÂà∞Êú¨Âú∞Â≠òÂÇ®
     */
    saveSettings() {
        try {
            this.settings.lastUpdated = Date.now();
            localStorage.setItem('boxing-timer-settings', JSON.stringify(this.settings));
            console.log('‚úÖ ËÆæÁΩÆ‰øùÂ≠òÂÆåÊàê');
        } catch (error) {
            console.error('‚ùå ‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•:', error);
        }
    }

    /**
     * Â∫îÁî®ÊâÄÊúâËÆæÁΩÆ
     */
    applySettings() {
        this.applyTheme();
        this.applyFontSize();
        this.applyColorblindMode();
        this.applyHighContrastMode();
        this.applyAnimationSettings();
        this.applyFullscreenSettings();
        
        console.log('üé® ËÆæÁΩÆÂ∫îÁî®ÂÆåÊàê');
    }

    /**
     * Êõ¥Êñ∞ËÆæÁΩÆ
     */
    updateSettings(newSettings) {
        const oldSettings = { ...this.settings };
        this.settings = { ...this.settings, ...newSettings };
        
        // Â∫îÁî®ÂèòÂåñÁöÑËÆæÁΩÆ
        this.applySettingsChanges(oldSettings, this.settings);
        
        // ‰øùÂ≠òËÆæÁΩÆ
        this.saveSettings();
        
        // ÈÄöÁü•ËßÇÂØüËÄÖ
        this.notifyObservers('settingsChanged', {
            oldSettings,
            newSettings: this.settings,
            changes: this.getChangedKeys(oldSettings, this.settings)
        });
        
        console.log('‚öôÔ∏è ËÆæÁΩÆÊõ¥Êñ∞ÂÆåÊàê:', Object.keys(newSettings));
    }

    /**
     * Â∫îÁî®ËÆæÁΩÆÂèòÂåñ
     */
    applySettingsChanges(oldSettings, newSettings) {
        const changes = this.getChangedKeys(oldSettings, newSettings);
        
        changes.forEach(key => {
            switch (key) {
                case 'theme':
                    this.applyTheme();
                    break;
                case 'fontSize':
                    this.applyFontSize();
                    break;
                case 'enableColorblindMode':
                    this.applyColorblindMode();
                    break;
                case 'enableHighContrast':
                    this.applyHighContrastMode();
                    break;
                case 'enableAnimation':
                    this.applyAnimationSettings();
                    break;
                case 'enableFullscreen':
                    this.applyFullscreenSettings();
                    break;
            }
        });
    }

    /**
     * Ëé∑ÂèñÂèòÂåñÁöÑËÆæÁΩÆÈîÆ
     */
    getChangedKeys(oldSettings, newSettings) {
        const changes = [];
        
        Object.keys(newSettings).forEach(key => {
            if (oldSettings[key] !== newSettings[key]) {
                changes.push(key);
            }
        });
        
        return changes;
    }

    // ========== ‰∏ªÈ¢òÁÆ°ÁêÜ ==========

    /**
     * Â∫îÁî®‰∏ªÈ¢ò
     */
    applyTheme() {
        const theme = this.getEffectiveTheme();
        const root = document.documentElement;
        
        // ÁßªÈô§ÊâÄÊúâ‰∏ªÈ¢òÁ±ª
        root.classList.remove('theme-light', 'theme-dark');
        
        // Ê∑ªÂä†ÂΩìÂâç‰∏ªÈ¢òÁ±ª
        root.classList.add(`theme-${theme}`);
        
        // ËÆæÁΩÆCSSÂèòÈáè
        this.applyThemeVariables(theme);
        
        // Êõ¥Êñ∞metaÊ†áÁ≠æ
        this.updateThemeMetaTags(theme);
        
        console.log(`üé® ‰∏ªÈ¢òÂ∑≤ÂàáÊç¢Ëá≥: ${theme}`);
    }

    /**
     * Ëé∑ÂèñÊúâÊïà‰∏ªÈ¢òÔºàÂ§ÑÁêÜautoÊ®°ÂºèÔºâ
     */
    getEffectiveTheme() {
        if (this.settings.theme === Theme.AUTO) {
            return window.matchMedia('(prefers-color-scheme: dark)').matches ? Theme.DARK : Theme.LIGHT;
        }
        return this.settings.theme;
    }

    /**
     * Â∫îÁî®‰∏ªÈ¢òCSSÂèòÈáè
     */
    applyThemeVariables(theme) {
        const variables = this.getThemeVariables(theme);
        const root = document.documentElement;
        
        Object.entries(variables).forEach(([property, value]) => {
            root.style.setProperty(property, value);
            this.cssVariables.set(property, value);
        });
    }

    /**
     * Ëé∑Âèñ‰∏ªÈ¢òÂèòÈáè
     */
    getThemeVariables(theme) {
        const baseVariables = {
            // Âä®ÁîªÂèòÈáè
            '--transition-fast': this.settings.enableAnimation ? '0.2s' : '0s',
            '--transition-medium': this.settings.enableAnimation ? '0.3s' : '0s',
            '--transition-slow': this.settings.enableAnimation ? '0.5s' : '0s',
        };
        
        if (theme === Theme.DARK) {
            return {
                ...baseVariables,
                // Ê∑±Ëâ≤‰∏ªÈ¢òÂèòÈáè
                '--color-bg-primary': '#121212',
                '--color-bg-secondary': '#1e1e1e',
                '--color-bg-tertiary': '#2d2d2d',
                '--color-text-primary': '#ffffff',
                '--color-text-secondary': '#b3b3b3',
                '--color-text-tertiary': '#666666',
                '--color-primary': '#00ff00',
                '--color-primary-hover': '#00cc00',
                '--color-secondary': '#ff4500',
                '--color-secondary-hover': '#cc3300',
                '--color-success': '#4caf50',
                '--color-warning': '#ff9800',
                '--color-error': '#f44336',
                '--color-info': '#2196f3',
                '--color-border': '#333333',
                '--color-shadow': 'rgba(0, 0, 0, 0.5)',
                '--color-overlay': 'rgba(0, 0, 0, 0.8)'
            };
        } else {
            return {
                ...baseVariables,
                // ÊµÖËâ≤‰∏ªÈ¢òÂèòÈáè
                '--color-bg-primary': '#ffffff',
                '--color-bg-secondary': '#f5f5f5',
                '--color-bg-tertiary': '#e0e0e0',
                '--color-text-primary': '#000000',
                '--color-text-secondary': '#666666',
                '--color-text-tertiary': '#999999',
                '--color-primary': '#007700',
                '--color-primary-hover': '#005500',
                '--color-secondary': '#cc3300',
                '--color-secondary-hover': '#aa2200',
                '--color-success': '#4caf50',
                '--color-warning': '#ff9800',
                '--color-error': '#f44336',
                '--color-info': '#2196f3',
                '--color-border': '#cccccc',
                '--color-shadow': 'rgba(0, 0, 0, 0.2)',
                '--color-overlay': 'rgba(255, 255, 255, 0.9)'
            };
        }
    }

    /**
     * Êõ¥Êñ∞‰∏ªÈ¢òÁõ∏ÂÖ≥ÁöÑmetaÊ†áÁ≠æ
     */
    updateThemeMetaTags(theme) {
        const themeColorMeta = document.querySelector('meta[name="theme-color"]');
        if (themeColorMeta) {
            themeColorMeta.content = theme === Theme.DARK ? '#121212' : '#ffffff';
        }
        
        const statusBarMeta = document.querySelector('meta[name="apple-mobile-web-app-status-bar-style"]');
        if (statusBarMeta) {
            statusBarMeta.content = theme === Theme.DARK ? 'black-translucent' : 'default';
        }
    }

    /**
     * ËÆæÁΩÆÁ≥ªÁªü‰∏ªÈ¢òÁõëÂê¨Âô®
     */
    setupSystemThemeListener() {
        if (window.matchMedia) {
            const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
            
            mediaQuery.addEventListener('change', () => {
                if (this.settings.theme === Theme.AUTO) {
                    this.applyTheme();
                    this.notifyObservers('systemThemeChanged', {
                        prefersDark: mediaQuery.matches
                    });
                }
            });
        }
    }

    // ========== Â≠ó‰ΩìÂ§ßÂ∞èÁÆ°ÁêÜ ==========

    /**
     * Â∫îÁî®Â≠ó‰ΩìÂ§ßÂ∞è
     */
    applyFontSize() {
        const root = document.documentElement;
        const sizeMultipliers = {
            [FontSize.SMALL]: 0.875,
            [FontSize.MEDIUM]: 1.0,
            [FontSize.LARGE]: 1.25,
            [FontSize.EXTRA_LARGE]: 1.5
        };
        
        const multiplier = sizeMultipliers[this.settings.fontSize] || 1.0;
        root.style.setProperty('--font-size-multiplier', multiplier.toString());
        
        console.log(`üî§ Â≠ó‰ΩìÂ§ßÂ∞èÂ∑≤ËÆæÁΩÆ: ${this.settings.fontSize} (${multiplier}x)`);
    }

    // ========== Êó†ÈöúÁ¢çËÆæÁΩÆ ==========

    /**
     * Â∫îÁî®Ëâ≤Áõ≤Ê®°Âºè
     */
    applyColorblindMode() {
        const root = document.documentElement;
        
        if (this.settings.enableColorblindMode) {
            root.classList.add('colorblind-mode');
            
            // Ëâ≤Áõ≤ÂèãÂ•ΩÁöÑÈ¢úËâ≤ÂèòÈáè
            root.style.setProperty('--color-primary', '#0066cc');
            root.style.setProperty('--color-secondary', '#ff8800');
            root.style.setProperty('--color-warning', '#0066cc');
            root.style.setProperty('--color-error', '#ff8800');
            
        } else {
            root.classList.remove('colorblind-mode');
            // ÊÅ¢Â§çÊ≠£Â∏∏È¢úËâ≤ÔºàÈÄöËøáÈáçÊñ∞Â∫îÁî®‰∏ªÈ¢òÔºâ
            this.applyTheme();
        }
        
        console.log(`üëÅÔ∏è Ëâ≤Áõ≤Ê®°Âºè: ${this.settings.enableColorblindMode ? 'ÂêØÁî®' : 'Á¶ÅÁî®'}`);
    }

    /**
     * Â∫îÁî®È´òÂØπÊØîÊ®°Âºè
     */
    applyHighContrastMode() {
        const root = document.documentElement;
        
        if (this.settings.enableHighContrast) {
            root.classList.add('high-contrast-mode');
        } else {
            root.classList.remove('high-contrast-mode');
        }
        
        console.log(`üîÜ È´òÂØπÊØîÊ®°Âºè: ${this.settings.enableHighContrast ? 'ÂêØÁî®' : 'Á¶ÅÁî®'}`);
    }

    // ========== Âä®ÁîªËÆæÁΩÆ ==========

    /**
     * Â∫îÁî®Âä®ÁîªËÆæÁΩÆ
     */
    applyAnimationSettings() {
        const root = document.documentElement;
        
        if (this.settings.enableAnimation) {
            root.classList.remove('no-animation');
        } else {
            root.classList.add('no-animation');
        }
        
        // Êõ¥Êñ∞ËøáÊ∏°Êó∂Èó¥ÂèòÈáè
        this.applyThemeVariables(this.getEffectiveTheme());
        
        console.log(`üé¨ Âä®ÁîªÊïàÊûú: ${this.settings.enableAnimation ? 'ÂêØÁî®' : 'Á¶ÅÁî®'}`);
    }

    // ========== ÂÖ®Â±èËÆæÁΩÆ ==========

    /**
     * Â∫îÁî®ÂÖ®Â±èËÆæÁΩÆ
     */
    applyFullscreenSettings() {
        if (this.settings.enableFullscreen) {
            this.requestFullscreen();
        } else {
            this.exitFullscreen();
        }
    }

    /**
     * ËØ∑Ê±ÇÂÖ®Â±è
     */
    async requestFullscreen() {
        try {
            if (document.documentElement.requestFullscreen) {
                await document.documentElement.requestFullscreen();
            } else if (document.documentElement.webkitRequestFullscreen) {
                await document.documentElement.webkitRequestFullscreen();
            } else if (document.documentElement.msRequestFullscreen) {
                await document.documentElement.msRequestFullscreen();
            }
            console.log('üì∫ Â∑≤ËøõÂÖ•ÂÖ®Â±èÊ®°Âºè');
        } catch (error) {
            console.warn('‚ö†Ô∏è ËøõÂÖ•ÂÖ®Â±èÂ§±Ë¥•:', error);
        }
    }

    /**
     * ÈÄÄÂá∫ÂÖ®Â±è
     */
    async exitFullscreen() {
        try {
            if (document.exitFullscreen) {
                await document.exitFullscreen();
            } else if (document.webkitExitFullscreen) {
                await document.webkitExitFullscreen();
            } else if (document.msExitFullscreen) {
                await document.msExitFullscreen();
            }
            console.log('üì∫ Â∑≤ÈÄÄÂá∫ÂÖ®Â±èÊ®°Âºè');
        } catch (error) {
            console.warn('‚ö†Ô∏è ÈÄÄÂá∫ÂÖ®Â±èÂ§±Ë¥•:', error);
        }
    }

    // ========== ËÆæÁΩÆËÆøÈóÆÂô® ==========

    /**
     * Ëé∑ÂèñËÆæÁΩÆÂÄº
     */
    get(key, defaultValue = null) {
        return this.settings[key] ?? defaultValue;
    }

    /**
     * ËÆæÁΩÆÂçï‰∏™ÂÄº
     */
    set(key, value) {
        this.updateSettings({ [key]: value });
    }

    /**
     * Ëé∑ÂèñÊâÄÊúâËÆæÁΩÆ
     */
    getAll() {
        return { ...this.settings };
    }

    /**
     * ÈáçÁΩÆ‰∏∫ÈªòËÆ§ËÆæÁΩÆ
     */
    reset() {
        this.settings = this.getDefaultSettings();
        this.applySettings();
        this.saveSettings();
        
        this.notifyObservers('settingsReset', { settings: this.settings });
        console.log('üîÑ ËÆæÁΩÆÂ∑≤ÈáçÁΩÆ‰∏∫ÈªòËÆ§ÂÄº');
    }

    // ========== ËßÇÂØüËÄÖÊ®°Âºè ==========

    /**
     * Ê∑ªÂä†ËßÇÂØüËÄÖ
     */
    addObserver(callback) {
        this.observers.push(callback);
    }

    /**
     * ÁßªÈô§ËßÇÂØüËÄÖ
     */
    removeObserver(callback) {
        const index = this.observers.indexOf(callback);
        if (index > -1) {
            this.observers.splice(index, 1);
        }
    }

    /**
     * ÈÄöÁü•ËßÇÂØüËÄÖ
     */
    notifyObservers(event, data) {
        this.observers.forEach(callback => {
            try {
                callback(event, data);
            } catch (error) {
                console.error('‚ùå ËßÇÂØüËÄÖÂõûË∞ÉÊâßË°åÂ§±Ë¥•:', error);
            }
        });
    }

    // ========== ÂØºÂÖ•ÂØºÂá∫ ==========

    /**
     * ÂØºÂá∫ËÆæÁΩÆ
     */
    export() {
        return {
            settings: this.settings,
            exportDate: new Date().toISOString(),
            version: '1.0'
        };
    }

    /**
     * ÂØºÂÖ•ËÆæÁΩÆ
     */
    import(data) {
        try {
            if (data.settings && typeof data.settings === 'object') {
                const validSettings = this.validateSettings(data.settings);
                this.updateSettings(validSettings);
                console.log('‚úÖ ËÆæÁΩÆÂØºÂÖ•ÊàêÂäü');
                return true;
            } else {
                throw new Error('Êó†ÊïàÁöÑËÆæÁΩÆÊï∞ÊçÆÊ†ºÂºè');
            }
        } catch (error) {
            console.error('‚ùå ÂØºÂÖ•ËÆæÁΩÆÂ§±Ë¥•:', error);
            throw error;
        }
    }

    /**
     * È™åËØÅËÆæÁΩÆÊï∞ÊçÆ
     */
    validateSettings(settings) {
        const defaultSettings = this.getDefaultSettings();
        const validSettings = {};
        
        Object.keys(defaultSettings).forEach(key => {
            if (key in settings) {
                const value = settings[key];
                const defaultValue = defaultSettings[key];
                
                // Á±ªÂûãÊ£ÄÊü•
                if (typeof value === typeof defaultValue) {
                    // Êûö‰∏æÂÄºÊ£ÄÊü•
                    if (key === 'theme' && !Object.values(Theme).includes(value)) {
                        validSettings[key] = defaultValue;
                    } else if (key === 'fontSize' && !Object.values(FontSize).includes(value)) {
                        validSettings[key] = defaultValue;
                    } else {
                        validSettings[key] = value;
                    }
                } else {
                    validSettings[key] = defaultValue;
                }
            }
        });
        
        return validSettings;
    }

    // ========== Ë∞ÉËØïÂäüËÉΩ ==========

    /**
     * Ëé∑ÂèñË∞ÉËØï‰ø°ÊÅØ
     */
    getDebugInfo() {
        return {
            currentSettings: this.settings,
            effectiveTheme: this.getEffectiveTheme(),
            cssVariables: Object.fromEntries(this.cssVariables),
            observersCount: this.observers.length,
            browserSupport: {
                localStorage: 'localStorage' in window,
                matchMedia: 'matchMedia' in window,
                fullscreenAPI: 'requestFullscreen' in document.documentElement
            }
        };
    }

    /**
     * ÈîÄÊØÅÂÆû‰æã
     */
    destroy() {
        // Ê∏ÖÁ©∫ËßÇÂØüËÄÖ
        this.observers = [];
        
        // Ê∏ÖÁ©∫CSSÂèòÈáèÁºìÂ≠ò
        this.cssVariables.clear();
        
        console.log('üóëÔ∏è SettingsManager Â∑≤ÈîÄÊØÅ');
    }
}